; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: npx shadow-cljs -d cider/cider-nrepl:0.28.5 watch :app
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉>  ; Use `alt+enter` to evaluate
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs, repl: :app
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
cljs꞉cljs.user꞉>  ; Use `alt+enter` to evaluate
nil
cljs꞉cljs-blog.key-tree꞉> 
cljs-blog.key-tree/Path
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/top
cljs꞉cljs-blog.key-tree꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:1
;  Can't take value of macro cljs.core/defn
; --------------------------------------------------------------------------------
; 
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/is-path-top?
cljs꞉cljs-blog.key-tree꞉> 
cljs-blog.key-tree/Location
cljs꞉cljs-blog.key-tree꞉> 
cljs-blog.key-tree/KeyTree
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/create-node
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/root
cljs꞉cljs-blog.key-tree꞉> 
#cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/loc
cljs꞉cljs-blog.key-tree꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:2
;  Use of undeclared Var cljs-blog.key-tree/get-value
; --------------------------------------------------------------------------------
; 
cljs꞉cljs-blog.key-tree꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:2
;  Use of undeclared Var cljs-blog.key-tree/get-value
; --------------------------------------------------------------------------------
; 
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/root
cljs꞉cljs-blog.key-tree꞉> 
#cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/loc
cljs꞉cljs-blog.key-tree꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:2
;  Use of undeclared Var cljs-blog.key-tree/get-value
; --------------------------------------------------------------------------------
; 
cljs꞉cljs-blog.key-tree꞉> 
; Evaluating file: key_tree.cljs
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:40:6
;  Use of undeclared Var cljs-blog.key-tree/change
; --------------------------------------------------------------------------------
; 
nil
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/root
cljs꞉cljs-blog.key-tree꞉> 
#cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}
cljs꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/loc
cljs꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
cljs꞉cljs-blog.key-tree꞉> 
loc
#cljs-blog.key-tree.Location{:tree #cljs-blog.key-tree.KeyTree{:value :root, :key-tree-children {}}, :path #cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}}
cljs꞉cljs-blog.key-tree꞉> 
(get-value loc)
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
cljs꞉cljs-blog.key-tree꞉> loc
#cljs-blog.key-tree.Location{:tree #cljs-blog.key-tree.KeyTree{:value :root, :key-tree-children {}}, :path #cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}}
cljs꞉cljs-blog.key-tree꞉> 
(def tree (:tree location))
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:1:18
;  Use of undeclared Var cljs-blog.key-tree/location
; --------------------------------------------------------------------------------
; 
cljs꞉cljs-blog.key-tree꞉> 
(def location loc)
#'cljs-blog.key-tree/location
cljs꞉cljs-blog.key-tree꞉> 
(def tree (:tree location))
#'cljs-blog.key-tree/tree
cljs꞉cljs-blog.key-tree꞉> 
tree
#cljs-blog.key-tree.KeyTree{:value :root, :key-tree-children {}}
cljs꞉cljs-blog.key-tree꞉> 
(def value (:value tree))
#'cljs-blog.key-tree/value
cljs꞉cljs-blog.key-tree꞉> 
value
:root
cljs꞉cljs-blog.key-tree꞉> 
loc
#cljs-blog.key-tree.Location{:tree #cljs-blog.key-tree.KeyTree{:value :root, :key-tree-children {}}, :path #cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}}
cljs꞉cljs-blog.key-tree꞉> 
(get-value root)
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
cljs꞉cljs-blog.key-tree꞉> 
; Jacking in...
; nREPL Connection was closed
; Starting Jack-in Terminal: npx shadow-cljs -d cider/cider-nrepl:0.28.5 watch :app
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉shadow.user꞉> 
; Creating cljs repl session...
; Connecting cljs repl: shadow-cljs...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs, repl: :app
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Jack-in done.
cljs꞉cljs.user꞉> 
; Evaluating file: key_tree.cljs
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:40:6
;  Use of undeclared Var cljs-blog.key-tree/change
; --------------------------------------------------------------------------------
; 
nil
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
nil
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
; Evaluating file: key_tree.cljs
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:40:6
;  Use of undeclared Var cljs-blog.key-tree/change
; --------------------------------------------------------------------------------
; 
nil
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
; Evaluating file: key_tree.cljs
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:40:6
;  Use of undeclared Var cljs-blog.key-tree/change
; --------------------------------------------------------------------------------
; 
nil
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/create-node
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> create-node
#object[cljs_blog$key_tree$create_node]
clj꞉cljs-blog.key-tree꞉> 
(create-node :a)
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
:repl/exception!
; 
; Execution error (TypeError) at (<cljs repl>:1).
; Cannot read properties of undefined (reading 'call')
clj꞉cljs-blog.key-tree꞉> 
nil
clj꞉cljs-blog.key-tree꞉> 
cljs-blog.key-tree/Path
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/top
clj꞉cljs-blog.key-tree꞉> 
top
#cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/is-path-top?
clj꞉cljs-blog.key-tree꞉> (is-path-top? top)
true
clj꞉cljs-blog.key-tree꞉> 
cljs-blog.key-tree/Location
clj꞉cljs-blog.key-tree꞉> 
cljs-blog.key-tree/KeyTree
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/create-node
clj꞉cljs-blog.key-tree꞉> 
(create-node :a)
#cljs-blog.key-tree.KeyTree{:value :a, :key-tree-children {}}
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/set-tree
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/update-tree
clj꞉cljs-blog.key-tree꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:6:6
;  Use of undeclared Var cljs-blog.key-tree/change
; --------------------------------------------------------------------------------
; 
clj꞉cljs-blog.key-tree꞉> 
nil
; ------ WARNING - :undeclared-var -----------------------------------------------
;  Resource: <eval>:6:6
;  Use of undeclared Var cljs-blog.key-tree/change
; --------------------------------------------------------------------------------
; 
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/change
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/set-value
clj꞉cljs-blog.key-tree꞉> 
; Evaluating file: key_tree.cljs
[]
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/root
clj꞉cljs-blog.key-tree꞉> 
#cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/loc
clj꞉cljs-blog.key-tree꞉> 
:root
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/new-loc
clj꞉cljs-blog.key-tree꞉> 
:new-root
clj꞉cljs-blog.key-tree꞉> 
new-loc
#cljs-blog.key-tree.Location{:tree #cljs-blog.key-tree.KeyTree{:value :new-root, :key-tree-children {}}, :path #cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}}
clj꞉cljs-blog.key-tree꞉> 
:new-root
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/change-value
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/new-loc1
clj꞉cljs-blog.key-tree꞉> new-loc1
#cljs-blog.key-tree.Location{:tree #cljs-blog.key-tree.KeyTree{:value ":rootnew-value", :key-tree-children {}}, :path #cljs-blog.key-tree.Path{:tag :top, :v nil, :k nil, :parent-path nil, :siblings nil}}
clj꞉cljs-blog.key-tree꞉> 
":rootnew-value"
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/added-child
clj꞉cljs-blog.key-tree꞉> 
:value
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/moves
clj꞉cljs-blog.key-tree꞉> 
{:key1 :child1, :key2 :child2}
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/level-2-loc
clj꞉cljs-blog.key-tree꞉> 
:root
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/child1-loc
clj꞉cljs-blog.key-tree꞉> 
#'cljs-blog.key-tree/child2-loc
clj꞉cljs-blog.key-tree꞉> 
:child1
clj꞉cljs-blog.key-tree꞉> 
:child2
clj꞉cljs-blog.key-tree꞉> 
